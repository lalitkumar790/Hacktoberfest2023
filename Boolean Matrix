#include <iostream>
#include <vector>
#include <unordered_set>

using namespace std;

void booleanMatrix(vector<vector<int>>& matrix) {
    unordered_set<int> rows_to_modify;
    unordered_set<int> cols_to_modify;
    
    int rows = matrix.size();
    int cols = matrix[0].size();
    
    // Identify rows and columns to modify based on the presence of 1s
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (matrix[i][j] == 1) {
                rows_to_modify.insert(i);
                cols_to_modify.insert(j);
            }
        }
    }
    
    // Modify rows
    for (int i : rows_to_modify) {
        for (int j = 0; j < cols; ++j) {
            matrix[i][j] = 1;
        }
    }
    
    // Modify columns
    for (int j : cols_to_modify) {
        for (int i = 0; i < rows; ++i) {
            matrix[i][j] = 1;
        }
    }
}

// Helper function to print the matrix
void printMatrix(const vector<vector<int>>& matrix) {
    for (const auto& row : matrix) {
        for (int val : row) {
            cout << val << " ";
        }
        cout << endl;
    }
}

int main() {
    vector<vector<int>> matrix1 = {{1, 0}, {0, 0}};
    booleanMatrix(matrix1);
    printMatrix(matrix1);

    vector<vector<int>> matrix2 = {{1, 0, 0}, {1, 0, 0}, {1, 0, 0}, {0, 0, 0}};
    booleanMatrix(matrix2);
    printMatrix(matrix2);

    return 0;
}
