#include <iostream>
#include <vector>
const int MOD = 1000000007;

int perfectSum(int N, int arr[], int sum) {
    // Initialize a 2D vector to store the count of subsets for each sum and array element
    std::vector<std::vector<int>> dp(N + 1, std::vector<int>(sum + 1, 0));

    // Base case: There is one way to achieve a sum of 0, i.e., an empty subset
    for (int i = 0; i <= N; i++)
        dp[i][0] = 1;

    // Calculate the count of subsets for each sum and array element
    for (int i = 1; i <= N; i++) {
        for (int j = 0; j <= sum; j++) {
            if (j < arr[i - 1])
                dp[i][j] = dp[i - 1][j];
            else
                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]) % MOD;
        }
    }

    // The result is stored in dp[N][sum]
    return dp[N][sum];
}

int main() {
    int N1 = 6;
    int arr1[] = {2, 3, 5, 6, 8, 10};
    int sum1 = 10;
    std::cout << "Output for Example 1: " << perfectSum(N1, arr1, sum1) << std::endl;

    int N2 = 5;
    int arr2[] = {1, 2, 3, 4, 5};
    int sum2 = 10;
    std::cout << "Output for Example 2: " << perfectSum(N2, arr2, sum2) << std::endl;

    return 0;
}
